#!/usr/bin/env python3

import json
import random
import requests
import subprocess
import sys
import time

with open("/etc/nagios/api.json", "r") as f:
    config = json.load(f)

host = config["host"]
passive_ping = config["passive_ping"]
checks = config["checks"]
api = config["api"]
headers = {"Accept": "application/json"}
auth = tuple(config["auth"])

if len(sys.argv) > 1 and sys.argv[1] == "cron":
    time.sleep(random.random() * 30)

for check, command in checks.items():
    check_result = subprocess.run(command, shell=True, capture_output=True)
    req = {
        "type": "Service",
        "filter": f"""host.name=="{host}" && service.name=="{check}" """,
        "exit_status": check_result.returncode,
    }

    check_output = check_result.stdout.decode("utf-8")
    if "|" in check_output:
        output, performance_data = check_output.split("|")
        req["plugin_output"] = output.strip()
        req["performance_data"] = performance_data.strip()
    else:
        req["plugin_output"] = check_output.strip()

    try:
        res = requests.post(api, auth=auth, headers=headers, json=req)
    except requests.exceptions.ConnectionError:
        continue
    if res.status_code != 200:
        print(f"Error {res.status_code} when submitting {check}: {res.json()}")

if passive_ping:
    req = {
        "type": "Host",
        "filter": f"""host.name=="{host}" """,
        "exit_status": 0,
        "plugin_output": "Alive",
    }
    try:
        res = requests.post(api, auth=auth, headers=headers, json=req)
    except requests.exceptions.ConnectionError:
        sys.exit(0)
    if res.status_code != 200:
        print(f"Error {res.status_code} when submitting hostalive: {res.json()}")
