#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# source: https://git.artera.it/mtorromeo/artera-scripts/blob/master/icinga-plugins/check_systemd
from __future__ import print_function


import sys
import subprocess
from argparse import ArgumentParser


SERVICENAME = "systemd"
OK = 0
WARNING = 1
CRITICAL = 2
UNKNOWN = 3
statusText = ["OK", "WARNING", "CRITICAL", "UNKNOWN"]


def printStatus(status, message):
    print("{servicename} {status}: {message}".format(
        servicename = SERVICENAME,
        status = statusText[status],
        message = message
    ))
    sys.exit(status)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("-v", "--verbose", action="count",
                        help="Verbose output")
    parser.add_argument("-i", "--ignore", metavar="SVC", nargs="*", default=[],
                        help="Ignore this service")
    parser.add_argument("-w", "--warning", metavar="SVC", nargs="*", default=[],
                        help="Treat this service as a warning if failed")
    parser.add_argument("-c", "--critical", metavar="SVC", nargs="*", default=[],
                        help="Treat this service as a critical if failed")

    args = parser.parse_args()

    if args.critical:
        if args.warning:
            default = UNKNOWN
        else:
            default = WARNING
    else:
        default = CRITICAL

    result = OK
    failname = False

    try:
        status = subprocess.check_output(["systemctl", "--full", "--no-pager"])
        status = status.splitlines()
        for state in status[1:]:
            state = state.split()
            if len(state) < 3:
                break

            if state[0] == '\xe2\x97\x8f':
              state.pop(0)

            name = state[0]
            state = state[2]

            if name in args.ignore:
                continue

            if state == "failed":
                if name in args.critical:
                    failstatus = CRITICAL
                elif name in args.warning:
                    failstatus = WARNING
                else:
                    failstatus = default

                if failstatus > result:
                    result = failstatus
                    failname = name

    except subprocess.CalledProcessError as e:
        printStatus(UNKNOWN, "Unexpected error from systemctl {0}".format(e))

    if failname:
        printStatus(result, "Service {0} is in failed state".format(failname))

    printStatus(OK, "All services are running")
