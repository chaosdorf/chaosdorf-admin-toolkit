#!/usr/bin/env perl
## Copyright Â© 2011 by Daniel Friesel <derf@finalrewind.org>
## License: WTFPL:
##   0. You just DO WHAT THE FUCK YOU WANT TO.
use strict;
use warnings;
use 5.010;

use LWP::UserAgent;
use Nagios::Plugin;

my $ua = LWP::UserAgent->new(
	requests_redirectable => [],
	timeout => 10,
);
my ($test, @passed, @failed);

my $nag = Nagios::Plugin->new(
	usage => 'Usage: %s [-v|--verbose] [-H|--host <host>] '
	       . '[-t|--timeout <timeout>]',
);

$nag->add_arg(
	spec => 'auth|a=s@',
	help => 'Verify that URL requires auth (HTTP 401)',
);

$nag->add_arg(
	spec => 'ok|o=s@',
	help => 'Verify that URL exists (HTTP 200)',
);

$nag->add_arg(
	spec  => 'redirect|r=s@',
	help  => 'Verify that FROM is a redirect (HTTP 301) to TO',
	label => '"FROM TO"',
);

sub pass {
	push(@passed, $test);
}

sub fail {
	push(@failed, $test);
}

sub check_redirect {
	my (%pairs) = @_;

	while (my ($from, $to) = each(%pairs)) {
		my $response = $ua->get($from);

		$test = "Redirect $from => $to";

		if (
				$response->code() == 301
				and $response->header('Location') eq $to
		) {
			pass();
		}
		else {
			fail();
		}
	}
}

sub check_ok {
	my (@sites) = @_;

	for my $site (@sites) {
		my $response = $ua->get($site);

		$test = "$site exists (and is no redirect)";

		if ($response->code() == 200) {
			pass();
		}
		else {
			fail();
		}
	}
}

sub check_exist {
	my (@urls) = @_;

	for my $url (@urls) {
		my $response = $ua->get($url);

		$test = "$url exists (no 404)";

		if ($response->code() ~~ [qw[200 301]]) {
			pass();
		}
		else {
			fail();
		}
	}
}

sub check_auth_required {
	my (@sites) = @_;

	for my $site (@sites) {
		my $response = $ua->get($site);

		$test = "$site requires auth";

		if ($response->code() == 401) {
			pass();
		}
		else {
			fail();
		}
	}
}

sub finish_tests {
	if (@failed == 0) {
		$nag->nagios_exit(
			OK,
			sprintf(
				'All %d tests OK',
				scalar @passed,
			),
		);
	}
	else {
		$nag->nagios_exit(
			WARNING,
			sprintf(
				'%d/%d tests failed: %s',
				scalar @failed,
				(@passed + @failed),
				join(qq{; }, @failed),
			),
		);
		exit 1;
	}
}

$nag->getopts();

if ($nag->opts()->auth()) {
	for my $url (@{ $nag->opts()->auth() }) {
		check_auth_required($url);
	}
}

if ($nag->opts()->ok()) {
	for my $url (@{ $nag->opts()->ok() }) {
		check_ok($url);
	}
}

if ($nag->opts()->redirect()) {
	for my $pair (@{ $nag->opts()->redirect() }) {
		my ($from, $to) = split(qr{\s+}o, $pair);

		$from =~ s{ ^ ["'] }{}ox;
		$to =~ s{ ["'] $ }{}ox;

		check_redirect($from => $to);
	}
}

finish_tests();
