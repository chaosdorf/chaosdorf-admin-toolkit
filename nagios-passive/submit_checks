#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;

use Config::Tiny;
use IPC::Run qw(harness);

our $VERSION = '0.1';

my $conffile = shift or die("Usage: $0 <config> [intervals]\n");

my $cfg         = Config::Tiny->read($conffile);
my $hostname    = qx{hostname -f};
my @intervals   = @ARGV;
my $results     = q{};
my $remote_host = $cfg->{_}->{nsca_host} or die("no remote host specified!\n");

my $send_nsca = harness(
	[ 'send_nsca', '-H', $remote_host ],
	'<'  => \$results,
	'>'  => sub { },
	'2>' => \*STDERR,
);

sub make_sections {
	my ( $host, @intervals ) = @_;

	return ( $host, map { "$host/$_" } @intervals );
}

sub run_check {
	my ( $host, $check, $cmd_string ) = @_;

	my @cmd = split( / /, $cmd_string );
	my $out;

	my $harness = harness(
		\@cmd,
		'<'  => \undef,
		'>&' => \$out,
	);

	$harness->run();

	chomp $out;

	return sprintf( "%s\t%s\t%s\t%s\n",
		$host, $check, $harness->result() || 0, $out, );
}

chomp($hostname);

for my $host ( 'common', $hostname ) {
	for my $section ( make_sections( $host, @intervals ) ) {
		for my $name ( keys %{ $cfg->{$section} // {} } ) {
			$results
			  .= run_check( $hostname, $name, $cfg->{$section}->{$name} );
		}
	}
}

$send_nsca->run() or die("send_nsca failed\n");

__END__

=head1 NAME

=head1 SYNOPSIS

=head1 VERSION

=head1 DESCRIPTION

=head1 OPTIONS

=over

=back

=head1 EXIT STATUS

=head1 CONFIGURATION

None.

=head1 DEPENDENCIES

=over

=back

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Copyright (C) 2011 by Daniel Friesel E<lt>derf@finalrewind.orgE<gt>

=head1 LICENSE

  0. You just DO WHAT THE FUCK YOU WANT TO.
